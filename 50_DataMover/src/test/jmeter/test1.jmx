<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.4" jmeter="2.9 r1437961">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="INPUT_FILE_FULLPATH_1" elementType="Argument">
            <stringProp name="Argument.name">INPUT_FILE_FULLPATH_1</stringProp>
            <stringProp name="Argument.value">D:\All\wORK\_TeamSymphony\_Scripts\DX_MEM_FILE\MockPersFile.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PREV_MEM_ID" elementType="Argument">
            <stringProp name="Argument.name">PREV_MEM_ID</stringProp>
            <stringProp name="Argument.value">-1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - JDBC RESULT" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400483436000</longProp>
        <longProp name="ThreadGroup.end_time">1400483436000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DBCONF ORACLE (HeUser)" enabled="true">
          <boolProp name="autocommit">false</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">OHEUSER</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@npmiqcdbp2.d2hs.com:1521:d2he</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">oracle</stringProp>
          <stringProp name="poolMax">100</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">HEUSER</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">// set the variables required by this thread group here.

log.info(&quot;******************************* jdbc begins *****************************************************&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${INPUT_FILE_FULLPATH_1}</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">All threads</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">RAW_LINE</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - config variables" enabled="true">
            <stringProp name="BeanShellSampler.query">// extract the member id and assign it to a varialbe
	String memstr =vars.get(&quot;RAW_LINE&quot;).toString();
	member_id = memstr.substring(0, 8);

	vars.put(&quot;MEMBER_ID&quot;,member_id.toString() );
	log.info(&quot;*************************************MEMBER_ID : &quot; + member_id);


// extract the * date from the row, assign it to a variable


// </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC - Date between assertion" enabled="true">
            <stringProp name="dataSource">OHEUSER</stringProp>
            <stringProp name="query">select &apos;PASS&apos; result FROM DUAL</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">RESULT</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">var result = vars.get(&quot;RESULT_1&quot;);

//log.info(&quot;--------------------------------------------- The database result is &quot; + result.toString());

if(  result.toString().equals(&quot;PASS&quot;) ){
	// pass here
	 SampleResult.setSuccessful(true);
	SampleResult.setResponseMessage(&quot;The member exist in the database schema&quot;);
	log.info(&quot;--------------------------------------------- Logged The database result is &quot; + result.toString());
	
}else{
	//fail here
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&quot;The member doesnot exist in the schema&quot;);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename">Result/jdbc_request_result.txt</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - ORDERING TEST" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400483436000</longProp>
        <longProp name="ThreadGroup.end_time">1400483436000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DBCONF ORACLE (HeUser)" enabled="true">
          <boolProp name="autocommit">false</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">OHEUSER</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@npmiqcdbp2.d2hs.com:1521:d2he</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">oracle</stringProp>
          <stringProp name="poolMax">100</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">HEUSER</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">// set the variables required by this thread group here.

log.info(&quot;******************************* Ordering test Begine *****************************************************&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${INPUT_FILE_FULLPATH_1}</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">All threads</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">RAW_LINE</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - config variables" enabled="true">
            <stringProp name="BeanShellSampler.query">// extract the member id and assign it to a varialbe
	String memstr =vars.get(&quot;RAW_LINE&quot;).toString();
	member_id = memstr.substring(0, 8);

	vars.put(&quot;MEMBER_ID&quot;,member_id.toString() );
	log.info(&quot;*************************************MEMBER_ID : &quot; + member_id);


// extract the * date from the row, assign it to a variable


// </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - ascending order memid" enabled="true">
            <stringProp name="BeanShellAssertion.query">var prev_mem_id = vars.get(&quot;PREV_MEM_ID&quot;);
var cur_mem_id = vars.get(&quot;MEMBER_ID&quot;);



if (  Integer.parseInt(prev_mem_id ) == -1  )
{
	// this is standard stuff
	log.info(&quot;----------------------------------------- if condition satisfied\n&quot;);
	vars.put(&quot;PREV_MEM_ID&quot;, cur_mem_id.toString());
	
}

else{
	log.info(&quot;---------------------------------------else condition satisfied&quot;);
	int_prev_mem_id = Integer.parseInt(prev_mem_id);
	int_cur_mem_id = Integer.parseInt(cur_mem_id) ;

	log.info(&quot;--------------------------- &quot; + int_prev_mem_id + &quot; --------------&quot; + int_cur_mem_id + &quot;\n&quot; );
	
	if(  int_prev_mem_id &gt;=  int_cur_mem_id ){
		log.info(&quot;Failure -----------------------------&quot; + prev_mem_id + &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + cur_mem_id);

		 SampleResult.setSuccessful(false);
		SampleResult.setResponseMessage(&quot;The member id&apos;s are not in ascending order &quot; + prev_mem_id.toString() + &quot; &gt; = &quot; + cur_mem_id.toString() );
		/*SampleResult.setResponseData(&quot; Members not in ascending order .&quot;);
		IsSuccess=false;
		
		SampleResult.setStopTestNow(true);
		*/
	}
	
	
	vars.put(&quot;PREV_MEM_ID&quot;, cur_mem_id.toString());
	
}


/*
Failure= true ;
FailureMessage = &quot;expected pagekey-abook_imported_contacts_to_invite != &quot; + vars.get(&quot;pagekey&quot;);
print(&quot;DisplayImportedContacts failed for ticketId=&quot; + vars.get(&quot;polling_id&quot;));
log.warn(&quot;DisplayImportedContacts failed for ticketId=&quot; + vars.get(&quot;polling_id&quot;));
}
}
*/</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename">Result/ordering_test_result.txt</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>